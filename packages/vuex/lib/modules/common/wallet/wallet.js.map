{"version":3,"sources":["../../../../src/modules/common/wallet/wallet.js"],"names":["getDecryptor","password","secret","encryptedMnemonic","HDpath","mnemonic","CryptoJS","AES","decrypt","toString","enc","Utf8","DirectSecp256k1HdWallet","fromMnemonic","namespaced","state","wallets","JSON","parse","window","localStorage","getItem","activeWallet","activeClient","selectedAddress","authorized","getters","client","wallet","address","getMnemonic","getPath","accounts","find","x","pathIncrement","relayers","nameAvailable","name","findIndex","lastWallet","loggedIn","signer","walletName","privKey","privkey","mutations","SET_ACTIVE_WALLET","setItem","SET_ACTIVE_CLIENT","ADD_WALLET","push","encrypt","stringify","PATH_INCREMENT","ADD_ACCOUNT","account","SET_RELAYERS","SET_SELECTED_ADDRESS","SET_BACKUP_STATE","backupState","ADD_MESSAGE_TYPE","typeUrl","type","registry","register","SIGN_OUT","actions","signOut","commit","unlockWallet","dispatch","rootGetters","encryptedWallet","length","prefix","accountSigner","root","getAccounts","console","log","updateRelayers","switchAccount","accountIndex","acc","addAccount","parseInt","storeWallets","signInWithPrivateKey","pKey","trim","DirectSecp256k1Wallet","fromKey","firstAccount","restoreWallet","encrypted","newName","incr","createWalletWithMnemonic","sendTransaction","message","memo","denom","fee","amount","gas","add","msg","signAndBroadcast","result"],"mappings":"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","sourcesContent":["import {\n\tDirectSecp256k1HdWallet,\n\tDirectSecp256k1Wallet\n} from '@cosmjs/proto-signing'\n\nimport { assertIsBroadcastTxSuccess } from '@cosmjs/stargate'\nimport { stringToPath } from '@cosmjs/crypto'\nimport CryptoJS from 'crypto-js'\nimport { keyFromWif, keyToWif } from '../../../helpers/keys'\n\n/* START TODO: Integrate closure below for additional security */\nfunction getDecryptor(password) {\n\tlet secret=password;\n\treturn async function(encryptedMnemonic, HDpath) {\n\t\tconst mnemonic = CryptoJS.AES.decrypt(encryptedMnemonic, secret).toString(\n\t\t\tCryptoJS.enc.Utf8\n\t\t)\n\t\treturn await DirectSecp256k1HdWallet.fromMnemonic(\n\t\t\tmnemonic,\n\t\t\tHDpath\n\t\t)\n\t}\n}\n/* END TODO */\nexport default {\n\tnamespaced: true,\n\tstate() {\n\t\treturn {\n\t\t\twallets: JSON.parse(window.localStorage.getItem('wallets')) || [],\n\t\t\tactiveWallet: null,\n\t\t\tactiveClient: null,\n\t\t\tselectedAddress: '',\n\t\t\tauthorized: false\n\t\t}\n\t},\n\tgetters: {\n\t\tclient: (state) => state.activeClient,\n\t\twallet: (state) => state.activeWallet,\n\t\taddress: (state) => state.selectedAddress,\n\t\tgetMnemonic: (state) => state.activeWallet.mnemonic,\n\t\tgetPath: (state) => state.activeWallet.HDpath+state.activeWallet.accounts.find(x => x.address==state.selectedAddress).pathIncrement,\n\t\trelayers: (state) => {\n\t\t\treturn state.activeWallet.accounts.find( x => x.address==state.selectedAddress).relayers ?? []\n\t\t},\n\t\tnameAvailable: (state) => (name) => {\n\t\t\treturn state.wallets.findIndex((x) => x.name == name) == -1\n\t\t},\n\t\tlastWallet: (state) => {\n\t\t\tif (state.activeWallet) {\n\t\t\t\treturn state.activeWallet.name\n\t\t\t} else {\n\t\t\t\treturn window.localStorage.getItem('lastWallet')\n\t\t\t}\n\t\t},\n\t\tloggedIn: (state) => state.activeClient !== null,\n\t\tsigner: (state) => {\n\t\t\tif (state.activeClient) {\n\t\t\t\treturn state.activeClient.signer\n\t\t\t} else {\n\t\t\t\treturn null\n\t\t\t}\n\t\t},\n\t\twalletName: (state) =>\n\t\t\tstate.activeWallet ? state.activeWallet.name : null,\n\t\tprivKey: (state) => {\n\t\t\tif (state.activeClient) {\n\t\t\t\treturn keyToWif(state.activeClient.signer.privkey)\n\t\t\t} else {\n\t\t\t\treturn null\n\t\t\t}\n\t\t}\n\t},\n\tmutations: {\n\t\tSET_ACTIVE_WALLET(state, wallet) {\n\t\t\tstate.activeWallet = wallet\n\t\t\twindow.localStorage.setItem('lastWallet', wallet.name)\n\t\t},\n\t\tSET_ACTIVE_CLIENT(state, client) {\n\t\t\tstate.activeClient = client\n\t\t\tstate.authorized = true\n\t\t},\n\t\tADD_WALLET(state, wallet) {\n\t\t\tstate.activeWallet = wallet\n\t\t\twindow.localStorage.setItem('lastWallet', wallet.name)\n\t\t\tif (state.activeWallet.name && state.activeWallet.password) {\n\t\t\t\tstate.wallets.push({\n\t\t\t\t\tname: state.activeWallet.name,\n\t\t\t\t\twallet: CryptoJS.AES.encrypt(\n\t\t\t\t\t\tJSON.stringify(state.activeWallet),\n\t\t\t\t\t\tstate.activeWallet.password\n\t\t\t\t\t).toString()\n\t\t\t\t})\n\t\t\t}\n\t\t},\n\t\tPATH_INCREMENT(state) {\n\t\t\tstate.activeWallet.pathIncrement = state.activeWallet.pathIncrement + 1\n\t\t},\n\t\tADD_ACCOUNT(state, account) {\n\t\t\tstate.activeWallet.accounts.push(account)\n\t\t\tif (state.activeWallet.name && state.activeWallet.password) {\n\t\t\t\tstate.wallets[\n\t\t\t\t\tstate.wallets.findIndex((x) => x.name === state.activeWallet.name)\n\t\t\t\t].wallet = CryptoJS.AES.encrypt(\n\t\t\t\t\tJSON.stringify(state.activeWallet),\n\t\t\t\t\tstate.activeWallet.password\n\t\t\t\t).toString()\n\t\t\t}\n\t\t},\n\t\tSET_RELAYERS(state,relayers) {\n\t\t\tstate.activeWallet.accounts.find( x => x.address==state.selectedAddress).relayers=relayers\n\t\t\tif (state.activeWallet.name && state.activeWallet.password) {\n\t\t\t\tstate.wallets[\n\t\t\t\t\tstate.wallets.findIndex((x) => x.name === state.activeWallet.name)\n\t\t\t\t].wallet = CryptoJS.AES.encrypt(\n\t\t\t\t\tJSON.stringify(state.activeWallet),\n\t\t\t\t\tstate.activeWallet.password\n\t\t\t\t).toString()\n\t\t\t}\n\t\t},\n\t\tSET_SELECTED_ADDRESS(state, address) {\n\t\t\tstate.selectedAddress = address\n\t\t},\n\t\tSET_BACKUP_STATE(state, backupState) {\n\t\t\tstate.backupState = backupState\n\t\t},\n\t\tADD_MESSAGE_TYPE(state, { typeUrl, type }) {\n\t\t\tstate.activeClient.registry.register(typeUrl, type)\n\t\t},\n\t\tSIGN_OUT(state) {\n\t\t\tstate.selectedAddress = ''\n\t\t\tstate.activeClient = null\n\t\t\tstate.activeWallet = null\n\t\t\tstate.authorized = false\n\t\t}\n\t},\n\tactions: {\n\t\tsignOut({ commit }) {\n\t\t\tcommit('SIGN_OUT')\n\t\t},\n\t\tasync unlockWallet(\n\t\t\t{ commit, state, dispatch, rootGetters },\n\t\t\t{ name, password }\n\t\t) {\n\t\t\tconst encryptedWallet =\n\t\t\t\tstate.wallets[state.wallets.findIndex((x) => x.name === name)].wallet\n\t\t\tconst wallet = JSON.parse(\n\t\t\t\tCryptoJS.AES.decrypt(encryptedWallet, password).toString(\n\t\t\t\t\tCryptoJS.enc.Utf8\n\t\t\t\t)\n\t\t\t)\n\t\t\tcommit('SET_ACTIVE_WALLET', wallet)\n\t\t\tif (wallet.accounts.length > 0) {\n\t\t\t\tconst accountSigner = await DirectSecp256k1HdWallet.fromMnemonic(\n\t\t\t\t\twallet.mnemonic,\n\t\t\t\t\tstringToPath(wallet.HDpath + wallet.accounts[0].pathIncrement),\n\t\t\t\t\twallet.prefix\n\t\t\t\t)\n\t\t\t\ttry {\n\t\t\t\t\tawait dispatch('common/env/signIn', accountSigner, {\n\t\t\t\t\t\troot: true\n\t\t\t\t\t})\n\t\t\t\t\tlet client = rootGetters['common/env/signingClient']\n\t\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\n\t\t\t\t\tconst [account] = await accountSigner.getAccounts()\n\t\t\t\t\tcommit('SET_SELECTED_ADDRESS', account.address)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(e)\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tasync updateRelayers({commit, dispatch}, relayers) {\n\t\t\tcommit('SET_RELAYERS',relayers)\n\t\t\tdispatch('storeWallets')\n\t\t},\n\t\tasync switchAccount({ commit, state, rootGetters, dispatch }, address) {\n\t\t\tconst accountIndex = state.activeWallet.accounts.findIndex(\n\t\t\t\t(acc) => acc.address == address\n\t\t\t)\n\t\t\tconst accountSigner = await DirectSecp256k1HdWallet.fromMnemonic(\n\t\t\t\tstate.activeWallet.mnemonic,\n\t\t\t\tstringToPath(\n\t\t\t\t\tstate.activeWallet.HDpath +\n\t\t\t\t\t\tstate.activeWallet.accounts[accountIndex].pathIncrement\n\t\t\t\t),\n\t\t\t\tstate.activeWallet.prefix\n\t\t\t)\n\n\t\t\ttry {\n\t\t\t\tawait dispatch('common/env/signIn', accountSigner, { root: true })\n\t\t\t\tlet client = rootGetters['common/env/signingClient']\n\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\n\t\t\t\tconst [account] = await accountSigner.getAccounts()\n\t\t\t\tcommit('SET_SELECTED_ADDRESS', account.address)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e)\n\t\t\t}\n\t\t},\n\t\tasync addAccount({ commit, state, dispatch }, pathIncrement) {\n\t\t\tif (!pathIncrement) {\n\t\t\t\tpathIncrement = state.activeWallet.pathIncrement + 1\n\t\t\t\tcommit('PATH_INCREMENT')\n\t\t\t}\n\t\t\tconst accountSigner = await DirectSecp256k1HdWallet.fromMnemonic(\n\t\t\t\tstate.activeWallet.mnemonic,\n\t\t\t\tstringToPath(state.activeWallet.HDpath + pathIncrement),\n\t\t\t\tstate.activeWallet.prefix\n\t\t\t)\n\t\t\tconst [acc] = await accountSigner.getAccounts()\n\t\t\tconst account = {\n\t\t\t\taddress: acc.address,\n\t\t\t\tpathIncrement: parseInt(pathIncrement)\n\t\t\t}\n\t\t\tif (\n\t\t\t\tstate.activeWallet.accounts.findIndex(\n\t\t\t\t\t(acc) => acc.address == account.address\n\t\t\t\t) == -1\n\t\t\t) {\n\t\t\t\tcommit('ADD_ACCOUNT', account)\n\t\t\t\tdispatch('storeWallets')\n\t\t\t} else {\n\t\t\t\tthrow 'Account already in store.'\n\t\t\t}\n\t\t},\n\t\tstoreWallets({ commit, state }) {\n\t\t\twindow.localStorage.setItem('wallets', JSON.stringify(state.wallets))\n\t\t\tcommit('SET_BACKUP_STATE', false)\n\t\t},\n\t\tasync signInWithPrivateKey(\n\t\t\t{ commit, rootGetters, dispatch },\n\t\t\t{ prefix = 'cosmos', privKey }\n\t\t) {\n\t\t\tconst pKey = keyFromWif(privKey.trim())\n\t\t\tconst accountSigner = await DirectSecp256k1Wallet.fromKey(pKey, prefix)\n\t\t\tconst [firstAccount] = await accountSigner.getAccounts()\n\n\t\t\ttry {\n\t\t\t\tawait dispatch('common/env/signIn', accountSigner, { root: true })\n\t\t\t\tlet client = rootGetters['common/env/signingClient']\n\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\n\t\t\t\tcommit('SET_SELECTED_ADDRESS', firstAccount.address)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e)\n\t\t\t}\n\t\t},\n\t\tasync restoreWallet(\n\t\t\t{ commit, dispatch, rootGetters, state },\n\t\t\t{ encrypted, password }\n\t\t) {\n\t\t\tconst wallet = JSON.parse(\n\t\t\t\tCryptoJS.AES.decrypt(encrypted, password).toString(CryptoJS.enc.Utf8)\n\t\t\t)\n\t\t\tlet newName = wallet.name\n\t\t\tlet incr = 1\n\t\t\twhile (state.wallets.findIndex((x) => x.name == newName) != -1) {\n\t\t\t\tnewName = wallet.name + '_' + incr\n\t\t\t\tincr++\n\t\t\t}\n\t\t\twallet.name = newName\n\t\t\tconst accountSigner = await DirectSecp256k1HdWallet.fromMnemonic(\n\t\t\t\twallet.mnemonic,\n\t\t\t\tstringToPath(wallet.HDpath + '0'),\n\t\t\t\twallet.prefix\n\t\t\t)\n\t\t\tconst [firstAccount] = await accountSigner.getAccounts()\n\t\t\tcommit('ADD_WALLET', wallet)\n\n\t\t\ttry {\n\t\t\t\tawait dispatch('common/env/signIn', accountSigner, { root: true })\n\n\t\t\t\tlet client = rootGetters['common/env/signingClient']\n\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\n\t\t\t\tcommit('SET_SELECTED_ADDRESS', firstAccount.address)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e)\n\t\t\t}\n\n\t\t\tdispatch('storeWallets')\n\t\t},\n\t\tasync createWalletWithMnemonic(\n\t\t\t{ commit, dispatch, rootGetters },\n\t\t\t{\n\t\t\t\tname = null,\n\t\t\t\tmnemonic,\n\t\t\t\tHDpath = \"m/44'/118'/0'/0/\",\n\t\t\t\tprefix = 'cosmos',\n\t\t\t\tpassword = null\n\t\t\t}\n\t\t) {\n\t\t\tconst wallet = {\n\t\t\t\tname,\n\t\t\t\tmnemonic,\n\t\t\t\tHDpath,\n\t\t\t\tpassword,\n\t\t\t\tprefix,\n\t\t\t\tpathIncrement: 0,\n\t\t\t\taccounts: []\n\t\t\t}\n\t\t\tconst accountSigner = await DirectSecp256k1HdWallet.fromMnemonic(\n\t\t\t\tmnemonic,\n\t\t\t\tstringToPath(HDpath + '0'),\n\t\t\t\tprefix\n\t\t\t)\n\t\t\tconst [firstAccount] = await accountSigner.getAccounts()\n\t\t\tconst account = { address: firstAccount.address, pathIncrement: 0 }\n\t\t\twallet.accounts.push(account)\n\t\t\tcommit('ADD_WALLET', wallet)\n\n\t\t\ttry {\n\t\t\t\tawait dispatch('common/env/signIn', accountSigner, { root: true })\n\n\t\t\t\tlet client = rootGetters['common/env/signingClient']\n\t\t\t\tcommit('SET_ACTIVE_CLIENT', client)\n\t\t\t\tcommit('SET_SELECTED_ADDRESS', firstAccount.address)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e)\n\t\t\t}\n\t\t\tdispatch('storeWallets')\n\t\t},\n\t\tasync sendTransaction({ state }, { message, memo, denom }) {\n\t\t\tconst fee = {\n\t\t\t\tamount: [{ amount: '0', denom }],\n\t\t\t\tgas: '200000'\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconsole.log({\n\t\t\t\t\tadd: state.selectedAddress,\n\t\t\t\t\tmsg: [message],\n\t\t\t\t\tfee,\n\t\t\t\t\tmemo\n\t\t\t\t})\n\t\t\t\tconst result = await state.activeClient.signAndBroadcast(\n\t\t\t\t\tstate.selectedAddress,\n\t\t\t\t\t[message],\n\t\t\t\t\tfee,\n\t\t\t\t\tmemo\n\t\t\t\t)\n\t\t\t\tassertIsBroadcastTxSuccess(result)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e)\n\t\t\t\tthrow 'Failed to broadcast transaction.' + e\n\t\t\t}\n\t\t}\n\t}\n}\n"],"file":"wallet.js"}